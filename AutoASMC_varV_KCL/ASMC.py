# -*- coding: utf-8 -*-
"""
Created on Sat Aug 15 19:10:20 2015

@author: sebo
"""

from Werkzeugkasten.ModelTemplate import Model

par_args = {'open' : 1.0,
            'to' : 0.0,
            'scale' :1.449,
            'openPar' : 1.0,
            'inOpen' : 1.0,
            'cp0' : 120.0,
            'aleph' : 1.0E-8,
            'q26' : 10500.0,
            'H' : 40.0,
            'po' : 0.0,
            'q62' : 4010.0,
            'L' : 1.0,
            'thres' : 900.0,
            'kdiff' : 10.0,
            'kleak' : 0.0032,
            'Vs' : 13.25,
            'ns' : 1.75,
            'Ks' : 0.26,
            'Ksocc' : 450.0,
            'y1' : 100.0,
            'y2' : 10.0,
            'Vrocc' : 0.0005,
            'Vsocc' : 0.0015,
            'Vp' : 0.614,
            'np' : 2.0,
            'Kp' : 0.5,
            'kIPR' : 0.07,
            'k24' : 0.35,
            'km24' : 80.0,
            'Tso' : 30.0,
            'kRyR' : 0.1,            
            'kryr0' : 0.0072,
            'kryr1' : 0.12,
            'kryr2' : 0.35,
            'kryr3' : 700.0,
            'R' : 8314.4621,
            'T' : 310.0,
            'F' : 96485.3415,
            'KCL' : 0.0,
            'K_ext' : 8.0,
            'K_int' : 120.0,
            'Na_ext' : 130.0,
            'Na_int' : 12.0,
            'Cl_ext' : 140.0,
            'Cl_int' : 55.0,
            'Ca_ext' : 2.0,
            'G_Kdr' : 0.035,
            'y_Kss' : 0.15,
            'gCa' : 0.009,
            'Vm' : -18.0,
            'km' : 17.5,
            'G_KCa' : 2.45,
            'alpha' : 280.0,
            'beta' : 480.0,
            'G_Cl' : 0.01,
            'Ca_CT' : 0.5,
            'K_mnsCa' : 1.2,
            'I_NaKMax' : 0.7,
            'Km_K' : 1.0,
            'Km_Na' : 40.0,
            'G_bNa' : 0.003263,
            'G_bK' : 0.008729,
            'Cm' : 2.0e-5}
aux_fns = {
    'p' : ' po * ( exp( ( t - to ) / 10.0 ) / ( 10.0 + exp( ( t - to ) / 10.0 )))',
    'E_Na' : '( R * T / F ) * log( Na_ext / Na_int )',
    'E_K' : '( R * T / F ) * log(( K_ext + KCL ) / K_int )',
    'E_Cl' : '( R * T / F ) * log( Cl_int / ( Cl_ext + KCL ))',
    'E_Ca' : '( R * T / ( 2.0 * F )) * log( Ca_ext / ( c * 1.0e-3 ))',
    'a42' : ' 1.8 * p ** 2.0 / ( p ** 2.0 + 0.34 )',
    'V24' : ' 62.0 + 880.0 / ( p ** 2.0 + 4.0 )',
    'V42' : ' 110.0 * p ** 2.0 / ( p ** 2.0 + 0.01 )',
    'k42' : ' 0.49 + 0.543 * p ** 3 / ( p ** 3.0 + 64.0 )',
    'a24' : ' 1.0 + 5.0 / ( p ** 2.0 + 0.25 )',
    'km42' :  ' 0.41 + 25.0 * p ** 3.0 / ( p ** 3.0 + 274.6 )',
    'cs' : ' y2 * ( ct - c - cb / y1 )',
    'cp' : ' cp0 * cs / 100.0',
    'h24inf' : ' km24 ** 2.0 / ( cp ** 2.0 + km24 ** 2.0 )',
    'm42inf' : ' cb ** 3.0 /( cb ** 3.0 + k42 ** 3.0 )',
    'm24inf' : ' cp ** 3.0 / ( cp ** 3.0 + k24 ** 3.0 )',
    'q42inf' : ' a42 + V42 * m42inf * h42 ',
    'q24inf' : ' a24 + V24 * ( 1.0 - m24inf * h24inf )',
    'D' : ' q42inf * ( q62 + q26 ) / ( q42inf * q62 + q42inf * q26 + q24inf * q62 )',
    'lh42' : ' ( 1.0 - D ) * L + D * H ',
    'PRyR' : ' ( kryr0 + kryr1 * c ** 3.0 / ( kryr2 ** 3.0 + c ** 3.0 )) * ( cs ** 4.0 / ( kryr3 ** 4.0 + cs ** 4.0 ))',
    'Jrocc' : ' openPar * inOpen * openPar * Vrocc * p * ( V - E_Ca )',
    'Jsocc' :  ' openPar * inOpen * openPar * Vsocc * Pso * ( V - E_Ca )',
    'Jdiff' : ' kdiff * ( cb - c )',
    'Jserca' : ' Vs * c ** ns / ( Ks ** ns + c ** ns )',
    'Jleak' :  ' kleak * ( cs - c )',
    'Jpm' : ' openPar * ( Vp * c ** np - aleph * cs ** 2.0 ) / ( Kp ** np + c ** np )',
    'JIPR' : ' kIPR * ( D * q26 / ( q62 + q26 )) * ( cs - cb )',
    'JRyR' : ' kRyR * PRyR * ( cs - c )',
    'xa_Inf' : ' 1.0 / ( 1.0 + exp(( - V + 5.5 ) / 6.0 ))',
    'xi1_Inf' :  ' 1.0 / ( 1.0 + exp(( V + 4.3 ) / 7.5 ))',
    'xi2_Inf' :  ' 1.0 / ( 1.0 + exp(( V + 4.3 ) / 7.5 ))',
    'I_Kdr' : ' G_Kdr * ( y_Kss + ( xi1_Inf + xi2_Inf ) * ( 1 - y_Kss )) * xa_Inf ** 2.0 * ( V - E_K )',
    'mVocc' :  ' 1.0 / ( 1.0 + exp( - ( V - Vm ) / km ))',
    'Vca' : ' V * (( 1.0e-3 * c ) - Ca_ext * exp( -2.0 * V * F / ( R * T ))) / ( 1.0 - exp( - 2.0 * V * F / ( R * T )))',
    'J_CaL' :  ' openPar * inOpen * openPar * gCa * mVocc ** 2.0 * Vca ',
    'K_4' : ' 0.0000125 * exp( -1.99 * V * F / ( R * T ))',
    'K_2' : ' 0.000275 * exp( - 1.51 * V * F / ( R * T ))',
    'K_m1' :  ' 0.24 * exp( - 0.012 * V )',
    'K_1' : ' 0.85 * exp( 0.04 * V )',
    'x_Ca1Inf' : ' (( c * 1.0e-3 ) ** 2.0 + K_4 * ( c * 1.0e-3 )) / (( c * 1.0e-3 ) ** 2.0 + K_4 * ( c * 1.0e-3 ) * ( 1.0 + alpha / beta ) + K_4 * K_2 * alpha / beta )',
    'B' : ' K_1 * ( c * 1.0e-3 ) * x_Ca1Inf / K_m1 ',
    'I_KCa' : ' G_KCa * x_Ca1Inf * B * ( V - E_K )',
    'I_ClCa' :  ' G_Cl * ( V - E_Cl ) / ( 1.0 + ( Ca_CT / c ) ** 3.0 )',
    'I_NaK' : ' I_NaKMax * (( K_ext + KCL ) / ( Km_K + ( K_ext + KCL ))) * ( Na_int / ( Km_Na + Na_int ))',
    'I_bK' : ' G_bK * ( V - E_K )',
    'I_bNa' :  ' G_bNa * ( V - E_Na )'
    }

funs = ['p','E_Na','E_K','E_Cl','E_Ca','a42','V24','V42','k42','a24','km42','cs','cp','h24inf','m42inf',
        'm24inf','q42inf','q24inf','D','lh42','PRyR','Jrocc','Jsocc','Jdiff','Jserca','Jleak','Jpm',
        'JIPR','JRyR','xa_Inf','xi1_Inf','xi2_Inf','I_Kdr','mVocc','Vca','J_CaL','K_4','K_2','K_m1',
        'K_1','x_Ca1Inf','B','I_KCa','I_ClCa','I_NaK','I_bK','I_bNa']

var  = ['c', 'cb', 'ct', 'h42', 'Pso', 'V']
rhs  = [' Jdiff + Jleak + JRyR - Jserca + openPar * scale * ( - Jpm + inOpen * openPar * ( - Jrocc - Jsocc - J_CaL ))',
      ' y1 * ( JIPR - Jdiff )',
      ' openPar * scale * ( - Jpm + inOpen * openPar * ( - Jrocc - Jsocc - J_CaL ))',
      ' lh42 * ( km42 ** 3.0 / ( cb ** 3.0 + km42 ** 3.0 ) - h42 )',
      ' 1.0 / Tso * ( Ksocc ** 4.0 / ( Ksocc ** 4.0 + cs ** 4.0 ) - Pso )',
      '-1.0 / Cm * ( openPar * ( Jpm + inOpen * openPar * ( Jrocc - Jsocc + J_CaL ) + I_Kdr + I_ClCa + I_bK + I_bNa + I_NaK + I_KCa ))']

asmc = Model('asmc', parameters=par_args.copy(), variables = var.copy(), funcList = funs.copy(), functions=aux_fns.copy(), rhsfunc=rhs.copy())


